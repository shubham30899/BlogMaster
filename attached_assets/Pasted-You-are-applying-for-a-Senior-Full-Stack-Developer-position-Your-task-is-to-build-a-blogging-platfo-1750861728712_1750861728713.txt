You are applying for a Senior Full Stack Developer position. Your task is to build a blogging platform using Next.js (App Router) and TypeScript with a focus on clean architecture, SSR, and dynamic content rendering.

üéØ Objective:
Create a feature-rich blog platform where users can create, view, and manage blog posts. The blog content supports custom dynamic {{block}} tags that render special UI components parsed from the post body.

üîß Tech Stack:
Framework: Next.js 14+ (App Router)

Language: TypeScript

Styling: TailwindCSS (optional but preferred)

Rendering: SSR where appropriate

Database: Local file, in-memory, SQLite, or MongoDB

Optional: JWT/Auth.js, Markdown parser

üß© Core Requirements:
‚úÖ 1. Home Page (/)
Server-rendered list of blog posts

Each card includes: Title, Author, Snippet (first 200 chars), Cover Image, Published Date

‚úÖ 2. Post Detail Page (/posts/[slug])
Server-rendered page showing the full post

Parse and render dynamic blocks like:

js
Copy
Edit
{{block name="Top Picks" image="/top-products.png" products="SKU123,SKU456"}}
‚úÖ 3. Create/Edit Blog (/create, /edit/[id])
Form with validation: Title, Cover image URL, Author name, Blog body

Save data to file or DB

‚úÖ 4. API Endpoints (/api)
GET /api/posts ‚Äì fetch all

GET /api/posts/[id] ‚Äì fetch one

POST /api/posts ‚Äì create

PUT /api/posts/[id] ‚Äì update

DELETE /api/posts/[id] ‚Äì delete

üß† Block Parsing Logic:
Detect {{block ...}} using regex

Extract attributes: name, image, products

Replace tag with a corresponding SSR React component

Include mock product data from:

ts
Copy
Edit
export const MOCK_PRODUCTS = [
  { sku: "SKU123", name: "Mechanical Keyboard", price: "$99", image: "/keyboard.png" },
  { sku: "SKU456", name: "Gaming Mouse", price: "$49", image: "/mouse.png" },
  { sku: "SKU789", name: "Monitor", price: "$199", image: "/monitor.png" },
];
‚≠ê Bonus (Optional but impressive):
Comment system

Dark mode

Markdown support

SEO-friendly slugs

Pagination / Infinite scroll

Toast notifications

Framer motion or transitions

Search / Filter

üì¶ Deliverables:
GitHub Repo with:

App using /app folder

API routes in /api

/data/products.ts with mock product data

Clear, modular, and maintainable code

README.md with:

Setup instructions

Tech stack

Live demo (if deployed)

üß™ Evaluation Criteria:
Feature completeness

Proper use of SSR

Code quality & modularity

UI/UX polish

Block parsing accuracy

Bonus features implementation

